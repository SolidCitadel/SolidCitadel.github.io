{"version":3,"file":"component---src-templates-post-template-tsx-b6d61dd56e5f7379d4a3.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/components/Post/RightSide.tsx","webpack://gatsby-starter-default/./src/components/Post/LeftSideItem.tsx","webpack://gatsby-starter-default/./src/components/Post/LeftSide.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  height: 100%;\n  margin: 0 auto;\n  padding: 30px 10px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 40px 20px;\n  }\n`\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 45px;\n  font-weight: 800;\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`\n\nconst PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n  font-size: 18px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    font-size: 15px;\n    font-weight: 400;\n  }\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  return (\n    <PostHeadInfoWrapper>\n      <Title>{title}</Title>\n      <PostData>\n        <div>{categories.join(' / ')}</div>\n        <div>{date}</div>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\nexport type PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData\n}\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 200px;\n\n  @media (max-width: 768px) {\n    height: 200px;\n  }\n`\n\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\n))`\n  z-index: -1;\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n  filter: opacity(0.25) brightness(0.75);\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n  thumbnail,\n}) {\n  return (\n    <PostHeadWrapper>\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n      <PostHeadInfo title={title} date={date} categories={categories} />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 40px 0;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 3px 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: 30px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 80px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 800;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 100px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import styled from '@emotion/styled'\r\nimport React, { createRef, FunctionComponent, useEffect } from 'react'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'SolidCitadel/SolidCitadel.github.io' // 자신 계정의 레포지토리로 설정\r\n\r\ntype UtterancesAttributesType = {\r\n  src: string\r\n  repo: string\r\n  'issue-term': string\r\n  label: string\r\n  theme: string\r\n  crossorigin: string\r\n  async: string\r\n}\r\n\r\nconst UtterancesWrapper = styled.div`\r\n  @media (max-width: 768px) {\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\nconst CommentWidget: FunctionComponent = function () {\r\n  const element = createRef<HTMLDivElement>()\r\n\r\n  useEffect(() => {\r\n    if (element.current === null) return\r\n\r\n    const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n    const attributes: UtterancesAttributesType = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: `github-light`,\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    }\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value)\r\n    })\r\n\r\n    element.current.appendChild(utterances)\r\n  }, [])\r\n\r\n  return <UtterancesWrapper ref={element} />\r\n}\r\n\r\nexport default CommentWidget\r\n","import { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\nconst RightSideWrapper = styled.aside`\n  width: 250px;\n  border-left: solid 1px #e2e2e2;\n`\n\nconst HtmlRenderer = styled.div`\n  position: sticky;\n  top: 65px;\n  margin-bottom: auto;\n  li {\n    margin: 5px;\n  }\n  ul {\n    list-style: none;\n  }\n`\n\ntype RightSideProps = {\n  html: string\n}\n\nconst RightSide: FunctionComponent<RightSideProps> = function ({ html }) {\n  return (\n    <RightSideWrapper>\n      <HtmlRenderer dangerouslySetInnerHTML={{ __html: html }} />\n    </RightSideWrapper>\n  )\n}\n\nexport default RightSide\n","import styled from '@emotion/styled'\nimport { FunctionComponent } from 'react'\nimport { Link } from 'gatsby'\n\nexport type LeftSideItemType = {\n  node: {\n    id: string\n    fields: {\n      slug: string\n    }\n    frontmatter: {\n      title: string\n    }\n  }\n}\n\nconst Container = styled(Link)`\n  padding: 3px;\n  margin: 5px;\n  cursor: pointer;\n`\n\nconst LeftSideItem: FunctionComponent<LeftSideItemType> = function ({\n  node: {\n    id,\n    fields: { slug },\n    frontmatter: { title },\n  },\n}) {\n  if (id + slug) console.log(1)\n  return <Container to={slug}>{title}</Container>\n}\n\nexport default LeftSideItem\n","import styled from '@emotion/styled'\nimport { FunctionComponent } from 'react'\nimport LeftSideItem, { LeftSideItemType } from './LeftSideItem'\n\nconst LeftSideWrapper = styled.aside`\n  width: 250px;\n  border-right: solid 1px #e2e2e2;\n`\n\nconst LeftSideContainer = styled.div`\n  position: sticky;\n  top: 65px;\n  margin-bottom: auto;\n  display: flex;\n  flex-direction: column;\n`\n\ntype LeftSideType = {\n  items: LeftSideItemType[]\n}\n\nconst LeftSide: FunctionComponent<LeftSideType> = function ({ items }) {\n  return (\n    <LeftSideWrapper>\n      <LeftSideContainer>\n        {items.map(({ node }: LeftSideItemType) => (\n          <LeftSideItem node={node} />\n        ))}\n      </LeftSideContainer>\n    </LeftSideWrapper>\n  )\n}\n\nexport default LeftSide\n","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport { PostFrontmatterType } from 'types/PostItem.types'\nimport Template from 'components/Common/Template'\nimport PostHead, { PostHeadProps } from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport CommentWidget from 'components/Post/CommentWidget'\nimport styled from '@emotion/styled'\nimport RightSide from 'components/Post/RightSide'\nimport LeftSide from 'components/Post/LeftSide'\nimport { LeftSideItemType } from 'components/Post/LeftSideItem'\n\ntype PostTemplateProps = {\n  data: {\n    slugMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n    allMarkdownRemark: {\n      edges: LeftSideItemType[]\n    }\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    slugMarkdownRemark: { edges: sedges },\n    allMarkdownRemark: { edges },\n  },\n}) {\n  const {\n    node: { html, frontmatter, tableOfContents },\n  } = sedges[0]\n  const postHeadProps: PostHeadProps = {\n    title: frontmatter.title,\n    date: frontmatter.date,\n    categories: frontmatter.categories,\n    thumbnail: frontmatter.thumbnail.childImageSharp.gatsbyImageData,\n  }\n\n  return (\n    <Template>\n      <Container>\n        <LeftSide items={edges} />\n        <Center>\n          <PostHead {...postHeadProps} />\n          <PostContent html={html} />\n          <CommentWidget />\n        </Center>\n        <RightSide html={tableOfContents} />\n      </Container>\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    slugMarkdownRemark: allMarkdownRemark(\n      filter: { fields: { slug: { eq: $slug } } }\n    ) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n            }\n          }\n          tableOfContents\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\nexport type PostPageItemType = {\n  node: {\n    html: string\n    frontmatter: PostFrontmatterType\n    tableOfContents: string\n  }\n}\n"],"names":["PostHeadInfoWrapper","Title","PostData","title","date","categories","___EmotionJSX","join","PostHeadWrapper","BackgroundImage","props","GatsbyImage","style","position","process","thumbnail","image","alt","PostHeadInfo","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","RightSideWrapper","HtmlRenderer","Container","Link","node","id","slug","fields","frontmatter","console","log","to","LeftSideWrapper","LeftSideContainer","items","map","LeftSideItem","Center","data","sedges","slugMarkdownRemark","edges","allMarkdownRemark","tableOfContents","postHeadProps","childImageSharp","gatsbyImageData","Template","LeftSide","PostHead","PostContent","CommentWidget","RightSide"],"sourceRoot":""}