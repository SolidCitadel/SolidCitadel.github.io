{"version":3,"file":"component---src-templates-post-template-tsx-1c2fb92f331967cd6b59.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/components/Post/RightSide.tsx","webpack://gatsby-starter-default/./src/components/Post/LeftSideItem.tsx","webpack://gatsby-starter-default/./src/components/Post/LeftSide.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nexport type PostHeadInfoProps = {\r\n  title: string\r\n  date: string\r\n  categories: string[]\r\n}\r\n\r\nconst PostHeadInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 768px;\r\n  height: 100%;\r\n  margin: 0 auto;\r\n  padding: 30px 10px;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 40px 20px;\r\n  }\r\n`\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  overflow-wrap: break-word;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 45px;\r\n  font-weight: 800;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 30px;\r\n  }\r\n`\r\n\r\nconst PostData = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    font-size: 15px;\r\n    font-weight: 400;\r\n  }\r\n`\r\n\r\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n}) {\r\n  return (\r\n    <PostHeadInfoWrapper>\r\n      <Title>{title}</Title>\r\n      <PostData>\r\n        <div>{categories.join(' / ')}</div>\r\n        <div>{date}</div>\r\n      </PostData>\r\n    </PostHeadInfoWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHeadInfo\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\r\n\r\ntype GatsbyImgProps = {\r\n  image: IGatsbyImageData\r\n  alt: string\r\n  className?: string\r\n}\r\n\r\nexport type PostHeadProps = PostHeadInfoProps & {\r\n  thumbnail: IGatsbyImageData\r\n}\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 200px;\r\n\r\n  @media (max-width: 768px) {\r\n    height: 200px;\r\n  }\r\n`\r\n\r\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\r\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\r\n))`\r\n  z-index: -1;\r\n  width: 100%;\r\n  height: 200px;\r\n  object-fit: cover;\r\n  filter: opacity(0.25) brightness(0.75);\r\n\r\n  @media (max-width: 768px) {\r\n    height: 300px;\r\n  }\r\n`\r\n\r\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n  thumbnail,\r\n}) {\r\n  return (\r\n    <PostHeadWrapper>\r\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\r\n      <PostHeadInfo title={title} date={date} categories={categories} />\r\n    </PostHeadWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHead\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\ninterface PostContentProps {\r\n  html: string\r\n}\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  // Renderer Style\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  padding: 40px 0;\r\n  word-break: break-all;\r\n\r\n  // Markdown Style\r\n  line-height: 1.8;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n\r\n  // Apply Padding Attribute to All Elements\r\n  p {\r\n    padding: 3px 0;\r\n  }\r\n\r\n  // Adjust Heading Element Style\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 800;\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    margin-top: 80px;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 30px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 25px;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  // Adjust Quotation Element Style\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 5px 15px;\r\n    border-left: 2px solid #000000;\r\n    font-weight: 800;\r\n  }\r\n\r\n  // Adjust List Element Style\r\n  ol,\r\n  ul {\r\n    margin-left: 20px;\r\n    padding: 30px 0;\r\n  }\r\n\r\n  // Adjust Horizontal Rule style\r\n  hr {\r\n    border: 1px solid #000000;\r\n    margin: 100px 0;\r\n  }\r\n\r\n  // Adjust Link Element Style\r\n  a {\r\n    color: #4263eb;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  // Adjust Code Style\r\n  pre[class*='language-'] {\r\n    margin: 30px 0;\r\n    padding: 15px;\r\n    font-size: 15px;\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background: rgba(255, 255, 255, 0.5);\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n\r\n  code[class*='language-'],\r\n  pre[class*='language-'] {\r\n    tab-size: 2;\r\n  }\r\n\r\n  // Markdown Responsive Design\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 80px 20px;\r\n    line-height: 1.6;\r\n    font-size: 14px;\r\n\r\n    h1 {\r\n      font-size: 23px;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 20px;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 17px;\r\n    }\r\n\r\n    img {\r\n      width: 100%;\r\n    }\r\n\r\n    hr {\r\n      margin: 50px 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\r\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\r\n}\r\n\r\nexport default PostContent\r\n","import styled from '@emotion/styled'\nimport React, { createRef, FunctionComponent, useEffect } from 'react'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'SolidCitadel/SolidCitadel.github.io' // 자신 계정의 레포지토리로 설정\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget\n","import { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\nconst RightSideWrapper = styled.aside`\n  width: 300px;\n  border-left: solid 1px #e2e2e2;\n\n  @media (max-width: 1368px) {\n    display: none;\n  }\n`\n\nconst HtmlRenderer = styled.div`\n  position: sticky;\n  top: 80px;\n  margin-bottom: auto;\n  li {\n    margin: 10px 0;\n  }\n  ul {\n    list-style: none;\n    margin-left: 5px;\n    padding-left: 10px;\n    border-left: solid 2px grey;\n  }\n  & > ul {\n    border-left: none;\n    margin-left: 0;\n  }\n`\n\ntype RightSideProps = {\n  html: string\n}\n\nconst RightSide: FunctionComponent<RightSideProps> = function ({ html }) {\n  return (\n    <RightSideWrapper>\n      <HtmlRenderer dangerouslySetInnerHTML={{ __html: html }} />\n    </RightSideWrapper>\n  )\n}\n\nexport default RightSide\n","import styled from '@emotion/styled'\nimport { FunctionComponent } from 'react'\nimport { Link } from 'gatsby'\n\nexport type LeftSideItemType = {\n  node: {\n    id: string\n    fields: {\n      slug: string\n    }\n    frontmatter: {\n      title: string\n    }\n  }\n}\n\nconst Container = styled(Link)`\n  padding: 3px;\n  margin: 5px;\n  cursor: pointer;\n`\n\nconst LeftSideItem: FunctionComponent<LeftSideItemType> = function ({\n  node: {\n    id,\n    fields: { slug },\n    frontmatter: { title },\n  },\n}) {\n  if (id) console.log(1)\n  let arr = slug.substring(1, slug.length - 1).split('/')\n  return (\n    <Container to={slug}>\n      {arr.slice(0, arr.length - 1).join('/') + '/' + title}\n    </Container>\n  )\n}\n\nexport default LeftSideItem\n","import styled from '@emotion/styled'\nimport { FunctionComponent } from 'react'\nimport LeftSideItem, { LeftSideItemType } from './LeftSideItem'\n\nconst LeftSideWrapper = styled.aside`\n  width: 250px;\n  border-right: solid 1px #e2e2e2;\n\n  @media (max-width: 1368px) {\n    display: none;\n  }\n`\n\nconst LeftSideContainer = styled.div`\n  position: sticky;\n  top: 80px;\n  margin-bottom: auto;\n  display: flex;\n  flex-direction: column;\n`\n\ntype LeftSideType = {\n  items: LeftSideItemType[]\n}\n\nconst LeftSide: FunctionComponent<LeftSideType> = function ({ items }) {\n  items.forEach(\n    ({\n      node: {\n        fields: { slug },\n      },\n    }) => {\n      let arr = slug.split('/')\n      arr = arr.slice(0, arr.length - 1)\n    },\n  )\n  return (\n    <LeftSideWrapper>\n      <LeftSideContainer>\n        {items.map(({ node }: LeftSideItemType) => (\n          <LeftSideItem node={node} />\n        ))}\n      </LeftSideContainer>\n    </LeftSideWrapper>\n  )\n}\n\nexport default LeftSide\n","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport { PostFrontmatterType } from 'types/PostItem.types'\nimport Template from 'components/Common/Template'\nimport PostHead, { PostHeadProps } from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport CommentWidget from 'components/Post/CommentWidget'\nimport styled from '@emotion/styled'\nimport RightSide from 'components/Post/RightSide'\nimport LeftSide from 'components/Post/LeftSide'\nimport { LeftSideItemType } from 'components/Post/LeftSideItem'\n\nexport type PostPageItemType = {\n  node: {\n    html: string\n    frontmatter: PostFrontmatterType\n    tableOfContents: string\n  }\n}\n\ntype PostTemplateProps = {\n  data: {\n    slugMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n    allMarkdownRemark: {\n      edges: LeftSideItemType[]\n    }\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  @media (max-width: 1368px) {\n    justify-content: center;\n  }\n`\n\nconst Center = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    slugMarkdownRemark: { edges: sedges },\n    allMarkdownRemark: { edges },\n  },\n}) {\n  const {\n    node: { html, frontmatter, tableOfContents },\n  } = sedges[0]\n  const postHeadProps: PostHeadProps = {\n    title: frontmatter.title,\n    date: frontmatter.date,\n    categories: frontmatter.categories,\n    thumbnail: frontmatter.thumbnail.childImageSharp.gatsbyImageData,\n  }\n\n  return (\n    <Template>\n      <Container>\n        <LeftSide items={edges} />\n        <Center>\n          <PostHead {...postHeadProps} />\n          <PostContent html={html} />\n          <CommentWidget />\n        </Center>\n        <RightSide html={tableOfContents} />\n      </Container>\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    slugMarkdownRemark: allMarkdownRemark(\n      filter: { fields: { slug: { eq: $slug } } }\n    ) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n            }\n          }\n          tableOfContents\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostHeadInfoWrapper","Title","PostData","title","date","categories","___EmotionJSX","join","PostHeadWrapper","BackgroundImage","props","GatsbyImage","style","position","process","thumbnail","image","alt","PostHeadInfo","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","RightSideWrapper","HtmlRenderer","Container","Link","node","id","slug","fields","frontmatter","console","log","arr","substring","length","split","to","slice","LeftSideWrapper","LeftSideContainer","items","map","LeftSideItem","Center","data","sedges","slugMarkdownRemark","edges","allMarkdownRemark","tableOfContents","postHeadProps","childImageSharp","gatsbyImageData","Template","LeftSide","PostHead","PostContent","CommentWidget","RightSide"],"sourceRoot":""}